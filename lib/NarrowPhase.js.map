{"version":3,"sources":["../src/NarrowPhase.js"],"names":["tempAABB","tempAABB2","NarrowPhase","world","collisionMap","tickId","currentCollisions","contactPool","collisionDatas","CIRCLE","RECTANGLE","LINE","lineVline","rectangleVline","collisionSuccess","bind","collisionFail","solver","collide","collisions","i","length","body1","body2","bounds","globalBounds","bounds2","aabbVaabb","j","shapes","shape1","k","shape2","type","collisonData","_tickId","endCollision","splice","solve","penetration","projection","key","id","contactData","pop","ignore","_key","onCollideBegin","dispatch","push","circle1","circle2","aabb1","aabb2","lower1","lower","upper1","upper","lower2","upper2","x","y","collisionData","onCollideEnd","reset"],"mappings":"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","file":"NarrowPhase.js","sourcesContent":["\nimport Vector from './Vector';\nimport AABB from './AABB';\nimport ContactData from './ContactData';\nimport Solver from './Solver';\n\nimport Shape from './shapes/Shape';\nimport circleVcircle from './collision/circleVcircle';\nimport rectangleVcircle from './collision/rectangleVcircle';\nimport rectangleVrectangle from './collision/rectangleVrectangle';\nimport circleVLine from './collision/circleVline';\n\n\nconst tempAABB = new AABB();\nconst tempAABB2 = new AABB();\n\nexport default class NarrowPhase\n{\n    constructor(world)\n    {\n        this.world = world;\n\n        this.collisionMap = {};\n\n        this.tickId = 0;\n\n        this.currentCollisions = [];\n        this.contactPool = [];\n\n        this.collisionDatas = [];\n\n        this[Shape.CIRCLE | Shape.CIRCLE] = circleVcircle;\n        this[Shape.RECTANGLE | Shape.RECTANGLE] = rectangleVrectangle;\n        this[Shape.LINE | Shape.LINE] = this.lineVline;\n        this[Shape.RECTANGLE | Shape.CIRCLE] = rectangleVcircle;\n        this[Shape.RECTANGLE | Shape.LINE] = this.rectangleVline;\n        this[Shape.CIRCLE | Shape.LINE] = circleVLine;\n\n        this.collisionSuccess = this.collisionSuccess.bind(this);\n        this.collisionFail = this.collisionFail.bind(this);\n\n        this.solver = new Solver();\n    }\n\n\n    collide(collisions)\n    {\n        this.tickId ++;\n\n        //TODO OPTIMISE THIS SHIZ\n        //for(var j = 0; j < 1; j++)\n        //{\n        for (var i = 0; i < collisions.length; i+=2)\n        {\n            // first aabb checks..\n\n            const body1 = collisions[i];\n            const body2 = collisions[i+1];\n\n            const bounds = body1.globalBounds(tempAABB)\n            const bounds2 = body2.globalBounds(tempAABB2)\n\n            if(this.aabbVaabb(bounds, bounds2))\n            {\n                for (var j = 0; j < body1.shapes.length; j++)\n                {\n                    const shape1 = body1.shapes[j];\n\n                    for (var k = 0; k < body2.shapes.length; k++)\n                    {\n                        const shape2 = body2.shapes[k];\n\n                        if(shape1.type < shape2.type)\n                        {\n                            this[shape1.type | shape2.type](\n                                body1,\n                                shape1,\n                                body2,\n                                shape2,\n                                this.collisionSuccess,\n                                this.collisionFail\n                            );\n                        }\n                        else\n                        {\n                            this[shape2.type | shape1.type](\n                                body2,\n                                shape2,\n                                body1,\n                                shape1,\n                                this.collisionSuccess,\n                                this.collisionFail\n                            );\n                        }\n                    }\n                }\n            }\n        }\n\n        // check for dead collisons..\n        for (var i = 0; i < this.currentCollisions.length; i++)\n        {\n\n            var collisonData = this.currentCollisions[i];\n\n            if(collisonData._tickId !== this.tickId)\n            {\n                // ended!\n                this.endCollision( collisonData );\n                this.currentCollisions.splice(i, 1);\n                i--;\n            }\n\n        };\n\n        // solve current collisions..\n        this.solver.solve(this.currentCollisions);\n    }\n\n    collisionSuccess(body1, shape1, body2, shape2, penetration, projection)\n    {\n        var key;\n\n        if(shape1.id > shape2.id)\n        {\n            key = (shape2.id << 12) + shape1.id;//shape1.id + \":\"+ shape2.id;\n        }\n        else\n        {\n            key = (shape1.id << 12) + shape2.id;//shape1.UID + \":\"+ object2.UID;\n\n        }\n\n        var contactData = this.collisionMap[key];\n\n        if( contactData )\n        {\n            contactData.penetration = penetration;\n            contactData.projection = projection;\n            contactData._tickId = this.tickId;\n        }\n        else\n        {\n         //   console.log(\"collision begin\")\n            contactData = this.contactPool.pop();\n\n            if(!contactData)\n            {\n                contactData = new ContactData(body1,\n                                              shape1,\n                                              body2,\n                                              shape2,\n                                              penetration,\n                                              projection,\n                                              false);\n            }\n            else\n            {\n                contactData.body1 = body1;\n                contactData.shape1 = shape1;\n                contactData.body2 = body2;\n                contactData.shape2 = shape2;\n\n                contactData.penetration = penetration;\n                contactData.projection = projection;\n                contactData.ignore = false;\n            }\n\n            contactData._key = key;\n            contactData._tickId = this.tickId;\n\n            this.world.onCollideBegin.dispatch(contactData);\n\n            this.currentCollisions.push(contactData);\n            this.collisionMap[key] = contactData;\n\n        }\n    }\n\n    collisionFail(body1, circle1, body2, circle2)\n    {\n        // no more collision!\n    }\n\n    aabbVaabb(aabb1, aabb2)\n    {\n        const lower1 = aabb1.lower;\n        const upper1 = aabb1.upper;\n        const lower2 = aabb2.lower;\n        const upper2 = aabb2.upper;\n\n        return ((lower2.x <= upper1.x && upper1.x <= upper2.x) || (lower1.x <= upper2.x && upper2.x <= upper1.x)) &&\n               ((lower2.y <= upper1.y && upper1.y <= upper2.y) || (lower1.y <= upper2.y && upper2.y <= upper1.y));\n    }\n\n    endCollision(collisionData)\n    {\n\n        var key = collisionData._key\n\n        var contactData = this.collisionMap[key];\n\n        if( contactData )\n        {\n          //  console.log(\"collision end\")\n\n            if(!contactData.ignore)\n            {\n                this.world.onCollideEnd.dispatch(contactData);\n            }\n\n            this.contactPool.push( contactData );\n            this.collisionMap[key] = null;\n\n        }\n\n        //TODO think about this!\n       // if(collisionData.object1.world)\n        {\n\n           // if(collisionData.object1.onCollideEnd)collisionData.object1.onCollideEnd(collisonData);\n           // if(collisionData.object2.onCollideEnd)collisionData.object2.onCollideEnd(collisonData);\n        }\n\n\n       return collisionData;\n    }\n\n    reset()\n    {\n        this.collisionMap ={};\n        this.tickId = 0;\n\n        this.currentCollisions = [];\n    }\n}"]}