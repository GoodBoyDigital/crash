{"version":3,"sources":["../src/Body.js"],"names":["UID","Body","data","type","DYNAMIC","mass","shapes","position","create","lastPosition","interpolatedPosition","velocity","acceleration","bounce","maxSpeed","gravity","friction","active","timeScale","boundingBox","boundsDirty","contactFriction","id","collisionMask","canCollide","addShape","shape","indexOf","push","console","log","globalBounds","out","lower","x","y","upper","invalidateBounds","updateBounds","minX","Infinity","minY","maxX","maxY","i","length","box","Math","max","min","set","update","deltaTime","speed","len","reset","createCircle","radius","body","createRectangle","width","height","r","createLine","rotation","STATIC","KINIMATIC"],"mappings":"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","file":"Body.js","sourcesContent":["import Vector from './Vector';\nimport AABB from './AABB';\nimport Circle from './shapes/Circle';\nimport Line from './shapes/Line';\nimport Rectangle from './shapes/Rectangle';\n\n\nlet UID = 0;\n\nexport default class Body\n{\n\n    constructor(data = {})\n    {\n        this.type = data.type || Body.DYNAMIC;\n\n        this.mass = 0;\n\n        this.shapes = data.shapes || [];\n\n        this.position = Vector.create();\n        this.lastPosition = Vector.create();\n        this.interpolatedPosition = Vector.create();\n\n        this.velocity = Vector.create();\n        this.acceleration = Vector.create();\n        this.bounce = 0;\n\n        this.maxSpeed = data.maxSpeed || 10000;\n\n        this.gravity = data.gravity || 0;//0.1;\n\n        this.friction = data.friction || 0.99;\n\n        this.active = true;\n\n        this.timeScale = 1;\n\n        this.boundingBox = new AABB();\n        this.boundsDirty = true;\n\n        this.bounce = 0.1;\n        this.contactFriction = 1;\n        this.friction = 1;\n\n        this.id = UID++;\n\n        this.collisionMask = 0;\n\n        this.canCollide = true;\n\n//        velX = x - lastX\n//velY = y - lastY\n\n//nextX = x + velX + accX * timestepSq\n//nextY = y + velY + accY * timestepSq\n\n//lastX = x\n//lastY = y\n\n//x = nextX\n//y = nextY\n    }\n\n    addShape(shape)\n    {\n        if(this.shapes.indexOf(shape) === -1)\n        {\n            this.shapes.push(shape);\n        }\n        console.log(\"<>>add shape <>\")\n        this.boundsDirty = true;\n    }\n\n    globalBounds(out)\n    {\n        const boundingBox = this.boundingBox;\n        const position = this.position;\n\n        out.lower.x = boundingBox.lower.x + position.x;\n        out.lower.y = boundingBox.lower.y + position.y;\n\n        out.upper.x = boundingBox.upper.x + position.x;\n        out.upper.y = boundingBox.upper.y + position.y;\n\n        return out;\n    }\n\n    invalidateBounds()\n    {\n        console.log(\"<>> in validate <>\")\n         this.boundsDirty = true;\n    }\n\n    updateBounds()\n    {\n        if(!this.boundsDirty)return;\n        this.boundsDirty = false;\n\n  //      console.log(\"-- updating bounds --\")\n\n        let minX = Infinity;\n        let minY = Infinity;\n\n        let maxX = -Infinity;\n        let maxY = -Infinity;\n\n        for (var i = 0; i < this.shapes.length; i++) {\n\n            const box = this.shapes[i].boundingBox;\n\n            maxX = Math.max(maxX, box.upper.x);\n            maxY = Math.max(maxY, box.upper.y);\n            minX = Math.min(minX, box.lower.x);\n            minY = Math.min(minY, box.lower.y);\n        }\n\n        this.boundingBox.set(minX, minY, maxX, maxY);\n    }\n\n    update(deltaTime)\n    {\n        if(!this.active)return;\n\n        var velocity = this.velocity\n\n        velocity.x += this.acceleration.x * deltaTime;\n        velocity.y += this.acceleration.y * deltaTime;\n\n        // frsition...\n        velocity.y *= this.friction;\n        velocity.x *= this.friction;\n\n        velocity.y += this.gravity * this.timeScale;\n\n        var speed = Vector.len(velocity);\n\n        if(speed > 0)\n        {\n            velocity.x /= speed;\n            velocity.y /= speed;\n\n            speed = Math.min(speed,this.maxSpeed);\n\n            velocity.x *= speed;\n            velocity.y *= speed;\n        }\n\n        this.position.x += velocity.x * this.timeScale * deltaTime;\n        this.position.y += velocity.y * this.timeScale * deltaTime;\n\n        this.lastPosition.x = this.position.x;\n        this.lastPosition.y = this.position.y;\n\n\n    }\n\n    reset()\n    {\n        this.velocity.set(0);\n        this.acceleration.set(0);\n\n        this.active = true;\n    }\n\n    static createCircle(data, radius, x, y)\n    {\n        var body = new Body(data);\n        body.addShape(new Circle(radius, Vector.create(x, y)));\n\n        return body;\n    }\n\n    static createRectangle(data, width, height, x, y, r)\n    {\n        var body = new Body(data);\n        body.addShape(new Rectangle(width, height, Vector.create(x, y), r));\n\n        return body;\n    }\n\n    static createLine(data, length, x,y, rotation)\n    {\n        var body = new Body(data);\n        body.addShape(new Line(length, Vector.create(x, y), rotation));\n\n        return body;\n    }\n}\n\nBody.DYNAMIC = 1;\nBody.STATIC = 2;\nBody.KINIMATIC = 4;\n\n/*\n    getDebugView(color)\n    {\n        var shape = this.shape;\n        var color = color || colors[this.type]\n        return new PIXI.Graphics().beginFill(color).drawRect(shape.x,shape.y,shape.width, shape.height)\n\n    }\n\n    CrashBody.fromRect = function(x, y, w, h){\n\n        return new CrashBody(new PIXI.Rectangle(x,y,w,h));\n    }\n\n    CrashBody.STATIC = 0;\n    CrashBody.KINIMATIC = 1;\n    CrashBody.DYNAMIC = 2;\n    CrashBody.NONE = 3;\n\n    colors = [\n        0x463a78,\n        0xFFFF00,\n        0xFF0000,\n        0x0000FF\n    ]\n    module.exports = CrashBody;\n\n});*/"]}