{"version":3,"sources":["../../src/collision/rectangleVrectangle.js"],"names":["rectangleVrectangle","body1","rectangle1","body2","rectangle2","success","fail","rotation","p1x","position","x","p1y","y","p2x","p2y","topDist","height","bottomDist","leftDist","width","rightDist","dist","penetrationLine","create","penetration","console","warn"],"mappings":";;;kBAGwBA,mB;;AAFxB;;;;;;AAEe,SAASA,mBAAT,CAA6BC,KAA7B,EAAoCC,UAApC,EAAgDC,KAAhD,EAAuDC,UAAvD,EAAmEC,OAAnE,EAA4EC,IAA5E,EACf;;AAEI,QAAGJ,WAAWK,QAAX,KAAwB,CAAxB,IAA6BH,WAAWG,QAAX,KAAwB,CAAxD,EACA;AACI;;;;;;;;;;;AAYA,YAAIC,MAAMN,WAAWO,QAAX,CAAoBC,CAApB,GAAwBT,MAAMQ,QAAN,CAAeC,CAAjD;AACA,YAAIC,MAAMT,WAAWO,QAAX,CAAoBG,CAApB,GAAwBX,MAAMQ,QAAN,CAAeG,CAAjD;;AAEA,YAAIC,MAAMT,WAAWK,QAAX,CAAoBC,CAApB,GAAwBP,MAAMM,QAAN,CAAeC,CAAjD;AACA,YAAII,MAAMV,WAAWK,QAAX,CAAoBG,CAApB,GAAwBT,MAAMM,QAAN,CAAeG,CAAjD;;AAIA,YAAIG,UAAYJ,MAAMT,WAAWc,MAAX,GAAkB,CAAzB,IAA+BF,MAAMV,WAAWY,MAAX,GAAkB,CAAvD,CAAf;AACA,YAAIC,aAAcH,MAAMV,WAAWY,MAAX,GAAkB,CAAzB,IAA+BL,MAAMT,WAAWc,MAAX,GAAkB,CAAvD,CAAjB;;AAEA,YAAIE,WAAYV,MAAMN,WAAWiB,KAAX,GAAiB,CAAxB,IAA8BN,MAAMT,WAAWe,KAAX,GAAiB,CAArD,CAAf;AACA,YAAIC,YAAaP,MAAMT,WAAWe,KAAX,GAAiB,CAAxB,IAA8BX,MAAMN,WAAWiB,KAAX,GAAiB,CAArD,CAAhB;;AAEA,YAAIE,OAAO,MAAX;;AAEA,YAAGH,WAAWG,IAAd,EAAmBA,OAAOH,QAAP;AACnB,YAAGE,YAAYC,IAAf,EAAoBA,OAAOD,SAAP;AACpB,YAAGL,UAAUM,IAAb,EAAkBA,OAAON,OAAP;AAClB,YAAGE,aAAaI,IAAhB,EAAqBA,OAAOJ,UAAP;;AAExB;AACG,YAAGI,QAAQ,CAAX,EACA;AACI;AACA,gBAAIC,kBAAmB,iBAAOC,MAAP,EAAvB;;AAEA,gBAAGF,QAAQH,QAAX,EACA;AACI;AACAI,gCAAgBZ,CAAhB,GAAoB,CAAC,CAArB;AACAY,gCAAgBV,CAAhB,GAAoB,CAApB;AACH,aALD,MAMK,IAAGS,QAAQD,SAAX,EACL;AACI;AACAE,gCAAgBZ,CAAhB,GAAoB,CAApB;AACAY,gCAAgBV,CAAhB,GAAoB,CAApB;AACH,aALI,MAMA,IAAGS,QAAQN,OAAX,EACL;AACI;AACAO,gCAAgBZ,CAAhB,GAAoB,CAApB;AACAY,gCAAgBV,CAAhB,GAAoB,CAAC,CAArB;AACH,aALI,MAMA,IAAGS,QAAQJ,UAAX,EACL;AACI;AACAK,gCAAgBZ,CAAhB,GAAoB,CAApB;AACAY,gCAAgBV,CAAhB,GAAoB,CAApB;AACH;;AAED,gBAAIY,cAAc,CAACH,IAAnB;;AAGAhB,oBAAQJ,KAAR,EACQC,UADR,EAEQC,KAFR,EAGQC,UAHR,EAIQoB,WAJR,EAKQF,eALR;AAMA;AACA;AACH,SAzCD,MA2CA;AACG;AACChB,iBAAKL,KAAL,EACIC,UADJ,EAEIC,KAFJ,EAGIC,UAHJ;;AAKA;AACH;AACJ,KAxFD,MA0FA;AACIqB,gBAAQC,IAAR,CAAa,gDAAb;AACH;AACD;AACD;AACH;;;;;;;;;;AAUI;;AAEA;AACApB,SAAKL,KAAL,EACKC,UADL,EAEKC,KAFL,EAGKC,UAHL;AAIH","file":"rectangleVrectangle.js","sourcesContent":["\nimport Vector from '../Vector';\n\nexport default function rectangleVrectangle(body1, rectangle1, body2, rectangle2, success, fail)\n{\n\n    if(rectangle1.rotation === 0 && rectangle2.rotation === 0)\n    {\n        /*\n        if(body1.id > body2.id)\n        {\n            var t = rectangle1;\n            rectangle1 = rectangle2;\n            rectangle2 = t;\n\n            var t = body1;\n            body1 = body2;\n            body2 = t;\n        }\n        */\n        var p1x = rectangle1.position.x + body1.position.x;\n        var p1y = rectangle1.position.y + body1.position.y;\n\n        var p2x = rectangle2.position.x + body2.position.x;\n        var p2y = rectangle2.position.y + body2.position.y;\n\n\n\n        var topDist =  (p1y + rectangle1.height/2) - (p2y - rectangle2.height/2);\n        var bottomDist = (p2y + rectangle2.height/2) - (p1y - rectangle1.height/2);\n\n        var leftDist = (p1x + rectangle1.width/2) - (p2x - rectangle2.width/2);\n        var rightDist = (p2x + rectangle2.width/2) - (p1x - rectangle1.width/2);\n\n        var dist = 999999;\n\n        if(leftDist < dist)dist = leftDist;\n        if(rightDist < dist)dist = rightDist;\n        if(topDist < dist)dist = topDist;\n        if(bottomDist < dist)dist = bottomDist;\n\n     //   console.log(leftDist, rightDist, topDist, bottomDist)\n        if(dist >= 0)\n        {\n            // hit!\n            var penetrationLine =  Vector.create();\n\n            if(dist == leftDist)\n            {\n                //console.log('left')\n                penetrationLine.x = -1;\n                penetrationLine.y = 0;\n            }\n            else if(dist == rightDist)\n            {\n                //console.log('right')\n                penetrationLine.x = 1;\n                penetrationLine.y = 0;\n            }\n            else if(dist == topDist)\n            {\n                //console.log('top')\n                penetrationLine.x = 0;\n                penetrationLine.y = -1;\n            }\n            else if(dist == bottomDist)\n            {\n                //console.log('bottom')\n                penetrationLine.x = 0;\n                penetrationLine.y = 1;\n            }\n\n            var penetration = -dist;\n\n\n            success(body1,\n                    rectangle1,\n                    body2,\n                    rectangle2,\n                    penetration,\n                    penetrationLine);\n            //return new CollisonData(item, item2, penetration, penetrationLine, false);\n            //item.collisonReaction();\n        }\n        else\n        {\n           // //console.log(\"FAIL\")\n            fail(body1,\n                rectangle1,\n                body2,\n                rectangle2);\n\n            //return null;\n        }\n    }\n    else\n    {\n        console.warn('rotated rectangles.. will not collide just yet')\n    }\n    //if( !(rectangle1.rotation % PI2) && !(rectangle1.rotation % PI2) )\n   // {\n/*\n        success(body1,\n                rectangle1,\n                body2,\n                rectangle2,\n                penetration,\n                penetrationLine1)\n    }\n\n*/\n    //console.log(\"FAIL\")\n\n    //no collision\n    fail(body1,\n         rectangle1,\n         body2,\n         rectangle2);\n}\n"]}