{"version":3,"sources":["../../src/collision/rectangleVcircle.js"],"names":["rectangleVcircle","temp","create","temp2","temp3","temp4","bodyRect","rectangle","bodyCirc","circle","success","fail","s","Math","sin","rotation","c","cos","ox","position","x","oy","y","cx","cy","localCirclePositionRot","localCirclePosition","sub","radius","rect","halfWidth","width","halfHeight","height","closestPoint","copy","distX","distY","dist","left","leftDist","rightDist","topDist","bottomDist","penetrationLine","penetration","penetrationLine2","len","normalize"],"mappings":"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","file":"rectangleVcircle.js","sourcesContent":["\nimport Vector from '../Vector';\n\nvar temp = Vector.create();\nvar temp2 = Vector.create();\nvar temp3 = Vector.create();\nvar temp4 = Vector.create();\n\nexport default function rectangleVcircle(bodyRect, rectangle, bodyCirc, circle, success, fail)\n{\n\n    var s = Math.sin(-rectangle.rotation);\n    var c = Math.cos(-rectangle.rotation);\n\n    var ox = bodyRect.position.x + rectangle.position.x;\n    var oy = bodyRect.position.y + rectangle.position.y;\n\n    var cx = bodyCirc.position.x + circle.position.x;\n    var cy = bodyCirc.position.y + circle.position.y;\n\n    var localCirclePositionRot = temp;\n    localCirclePositionRot.x = c * (cx - ox) - s * (cy - oy) + ox;\n    localCirclePositionRot.y = s * (cx - ox) + c * (cy - oy) + oy;\n\n    var localCirclePosition = Vector.sub(localCirclePositionRot, localCirclePositionRot, new Vector(ox, oy));\n\n\n    var radius = circle.radius;\n    var rect = rectangle;\n    var halfWidth = rect.width/2;\n    var halfHeight = rect.height/2;\n\n    var closestPoint = Vector.copy(temp2, localCirclePosition);\n\n    if(localCirclePosition.x < -halfWidth)\n    {\n        closestPoint.x = -halfWidth;\n    }\n    else if(localCirclePosition.x > halfWidth)\n    {\n        closestPoint.x = halfWidth;\n    }\n\n    if(localCirclePosition.y < -halfHeight)\n    {\n        closestPoint.y = -halfHeight;\n    }\n    else if(localCirclePosition.y > halfHeight)\n    {\n        closestPoint.y = halfHeight;\n    }\n\n\n    var distX = closestPoint.x - localCirclePosition.x;\n    var distY = closestPoint.y - localCirclePosition.y;\n    var dist = distX * distX + distY * distY ;\n\n    if(dist === 0)\n    {\n        closestPoint.x = rect.left;\n\n        var leftDist =  localCirclePosition.x - rect.left;\n        var rightDist = halfWidth - localCirclePosition.x;\n\n        var topDist =  localCirclePosition.y - -halfHeight;\n        var bottomDist = halfHeight - localCirclePosition.y;\n\n        var dist = 999999;\n\n        if(leftDist < dist)dist = leftDist;\n        if(rightDist < dist)dist = rightDist;\n        if(topDist < dist)dist = topDist;\n        if(bottomDist < dist)dist = bottomDist;\n\n        penetrationLine = temp3;//this.temp4;\n        if(dist == leftDist)\n        {\n            penetrationLine.x =-1\n            penetrationLine.y = 0.00001;\n        }\n        else if(dist == rightDist)\n        {\n            penetrationLine.x = 1\n            penetrationLine.y = 0.00001;\n        }\n        else if(dist == topDist)\n        {\n            penetrationLine.x = 0.00001;\n            penetrationLine.y = -1;\n        }\n        else if(dist == bottomDist)\n        {\n            penetrationLine.x = 0.00001\n            penetrationLine.y = 1;\n        }\n\n        var penetration = -dist-radius;\n\n        const penetrationLine2 = new Vector();\n        penetrationLine2.x = (penetrationLine.x * c) + (penetrationLine.y * s)\n        penetrationLine2.y = (penetrationLine.y * c) - (penetrationLine.x * s)\n\n\n      //  penetrationLine2.x *= -1;\n       // penetrationLine2.y *= -1;\n        // reaction...\n      //  circle.position.x -= penetrationLine2.x * (penetration);\n     //   circle.position.y -= penetrationLine2.y * (penetration);\n\n        success(bodyCirc,\n                circle,\n                bodyRect,\n                rectangle,\n                penetration,\n                penetrationLine2)\n\n        //success(circle, aabb, penetration, penetrationLine2);\n        return\n\n    }\n    else if(radius * radius > dist)\n    {\n        var penetrationLine =  Vector.sub(localCirclePosition, localCirclePosition, closestPoint);\n\n        var penetration = Vector.len(penetrationLine) - radius;\n\n        if(penetration < 0)\n        {\n            Vector.normalize(penetrationLine, penetrationLine);\n\n            const penetrationLine2 = new Vector();\n            penetrationLine2.x = (penetrationLine.x * c) + (penetrationLine.y * s)\n            penetrationLine2.y = (penetrationLine.y * c) - (penetrationLine.x * s)\n\n            // reaction...\n          //  circle.position.x -= penetrationLine2.x * (penetration);\n          //  circle.position.y -= penetrationLine2.y * (penetration);\n\n            success(bodyCirc,\n                    circle,\n                    bodyRect,\n                    rectangle,\n                    penetration,\n                    penetrationLine2)\n\n            return\n        }\n    }\n\n    //no collision\n    fail(bodyRect,\n         rectangle,\n         bodyCirc,\n         circle);\n}\n"]}