{"version":3,"sources":["../src/World.js"],"names":["World","onCollideBegin","onCollideEnd","staticBodies","STATIC","dynamicBodies","DYNAMIC","bodies","collisions","narrowPhase","dt","collisionKeys","DEBUG","registerCollison","add","body","type","remove","update","i","children","length","getCollisions","collide","reset","empty","getKey","a","b","type1","type2","updateBounds","list","size","sortAxisList","body1","newItemLeft","position","x","boundingBox","upper","j","body2","currentItemRight","lower","canCollide","id","push","key","collisionMask","l","v","a2"],"mappings":"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","file":"World.js","sourcesContent":["  //  var CollisionTest = require('../Group');\n\nimport Group from './utils/Group';\nimport Body from './Body';\n\nimport NarrowPhase from './NarrowPhase';\nimport Signal from 'mini-signals';\n\nexport default class World\n{\n\n\n    constructor()\n    {\n        // on hit test against.. platforms\n        this.onCollideBegin = new Signal();\n        this.onCollideEnd = new Signal();\n\n        this.staticBodies = this[Body.STATIC] = new Group();\n        this.dynamicBodies = this[Body.DYNAMIC] = new Group();\n        this.bodies = new Group();\n\n        this.collisions = [];\n        this.narrowPhase = new NarrowPhase(this);\n\n        this.dt = 1;\n\n        this.collisionKeys = {};\n\n        this.DEBUG = false;\n\n        this.registerCollison(0,0);\n\n\n\n\n    }\n\n    add(body)\n    {\n        this[body.type].add(body);\n        this.bodies.add(body);\n    }\n\n    remove(body)\n    {\n        this[body.type].remove(body);\n        this.bodies.remove(body);\n    }\n\n    update()\n    {\n        //TODO seperate to a broadphase\n       // console.log(this.bodies.children.length)\n        for (var i = 0; i < this.dynamicBodies.children.length; i++)\n        {\n            this.dynamicBodies.children[i].update(this.dt);\n        };\n\n        var collisions = this.getCollisions();\n        this.narrowPhase.collide(collisions);\n    }\n\n    reset()\n    {\n        this.staticBodies.empty();\n        this.dynamicBodies.empty();\n        this.bodies.empty();\n\n        this.collisions.length = 0;\n\n        this.narrowPhase.reset();\n\n    }\n\n    getKey(a, b)\n    {\n        return (a << 12) + b;\n    }\n\n    registerCollison(type1, type2)\n    {\n        this.collisionKeys[this.getKey(type1, type2)] = true;\n        this.collisionKeys[this.getKey(type2, type1)] = true;\n    }\n\n    updateBounds()\n    {\n        // TODO no need to update static!\n        var list = this.bodies.children;\n\n        for (var i = 0; i < list.length; i++)\n        {\n            list[i].updateBounds();\n        }\n    }\n\n    getCollisions()\n    {\n        this.collisions.length = 0;\n\n        var size = 0;\n\n        this.updateBounds();\n\n        //SAP!\n        var list =  this.bodies.children;\n\n        this.sortAxisList( list );\n\n        for (var i = 0; i < list.length; i++)\n        {\n            var body1 = list[i];\n            var newItemLeft = body1.position.x + body1.boundingBox.upper.x;\n            for (var j = i+1; j < list.length; j++)\n            {\n                var body2 = list[j];\n\n                var currentItemRight = body2.position.x + body2.boundingBox.lower.x;// - 5;\n\n                if(newItemLeft <= currentItemRight)\n                {\n                    break;\n                }\n                else\n                {\n                    if(this.canCollide(body1, body2))\n                    {\n                        // this is important to add as it makes sure bodies are hit test in the correct order\n                        // every frame whilst a collision endures\n                        if(body1.id > body2.id)\n                        {\n                           this.collisions.push(body1,\n                                                body2);\n                        }\n                        else\n                        {\n                            this.collisions.push(body2,\n                                                 body1);\n                        }\n                    }\n\n                }\n            }\n        };\n\n        // finallly hit tes the bounds..\n\n        return this.collisions;\n    }\n\n    canCollide(body1, body2)\n    {\n        if((body1.type | body2.type) !== (Body.STATIC | Body.STATIC))\n        {\n            if(body2.canCollide && body1.canCollide)\n            {\n                var key = this.getKey(body2.collisionMask, body1.collisionMask)\n\n                if(this.collisionKeys[key])\n                {\n                    return true;\n                }\n            }\n        }\n\n\n        return false;\n    }\n\n    sortAxisList(a)\n    {\n        for(var i=1,l=a.length; i<l; i++)\n        {\n            var v = a[i];\n            for(var j=i - 1;j>=0;j--)\n            {\n                var a2 = a[j];\n\n                if(a2.boundingBox.lower.x + a2.position.x  <= v.boundingBox.lower.x + v.position.x )\n                {\n                    break;\n                }\n\n                a[j+1] = a[j];\n            }\n\n            a[j+1] = v;\n        }\n\n        return a;\n    };\n\n}"]}